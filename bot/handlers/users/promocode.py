from aiogram import types, html
from aiogram.utils.i18n import gettext
from aiogram.types import LinkPreviewOptions
from aiogram.filters import CommandStart
from sqlalchemy.orm import Session

from bot.decorators import create_session
from bot.misc import bot_settings
from bot.routers import users as router
from bot.filters import Text, Chat, ContentType, Permission
from bot.keyboards.inline import promocode as button

from db import repository as repo


_ = gettext

@router.message(Chat().is_private(), ContentType(ContentType.TEXT), Text(startswith="!–ø—Ä–æ–º–æ–∫–æ–¥ "))
@create_session
async def promocode_handler(message: types.Message, session: Session):
    text = message.text

    if len(text.split()) == 2:
        promocode = text.split()[1]
        
        response = await repo.UsedPromocodesTableRepository().use_promocode(
            promocode=promocode, user_id=message.from_user.id, session=session)
        
        if response['success']:
            await message.answer(
                html.bold(_("üí∏ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!")) + "\n\n" +
                html.italic(_("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ") + f"{response['cost']} üí∞")
            )
        else:
            if response['error'] == "already used":
                await message.answer(html.bold(
                    _("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå")
                ))
            elif response['error'] == "invalid promocode":
                await message.answer(html.bold(
                    _("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚ùå")
                ))


@router.message(Chat().is_private(), CommandStart(), 
                lambda message: (len(str(message.text).split()) == 2 and 
                                str(message.text).split()[1].startswith("promocode_")))
@create_session
async def promocode_start_handler(message: types.Message, session: Session):
    text = message.text.split()[1].split("promocode_")

    if len(text) == 2:
        promocode = text[-1]

        response = await repo.UsedPromocodesTableRepository().use_promocode(
            promocode=promocode, user_id=message.from_user.id, session=session)
        
        if response['success']:
            await message.answer(
                html.bold(_("üí∏ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!")) + "\n\n" +
                html.italic(_("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ") + f"{response['cost']} üí∞")
            )
        else:
            if response['error'] == "already used":
                await message.answer(html.bold(
                    _("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå")
                ))
            elif response['error'] == "invalid promocode":
                await message.answer(html.bold(
                    _("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚ùå")
                ))


@router.message(Chat().is_private(), ContentType(ContentType.TEXT), 
                Text(startswith='!—Å–æ–∑–¥–∞—Ç—å-–ø—Ä–æ–º–æ–∫–æ–¥ '), 
                Permission(permission_classes=[Permission.ADMIN]))
@create_session
async def create_promocode_handler(message: types.Message, session: Session):
    text = message.text

    if len(text.split()) == 4:
        promocode = text.split()[1]
        try:
            cost = int(text.split()[2])
            max_users = int(text.split()[3])

            is_exist = (not (await repo.PromocodesTableRepository().get_promocode(
                promocode=promocode, session=session)) == None)
        
            if not is_exist:
                await repo.PromocodesTableRepository().create_promocode(
                    promocode=promocode, cost=cost, max_users=max_users, session=session)
                await message.reply(
                    (html.bold(
                        _("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ")
                    ) + "\n\n" + html.italic(
                        _("–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:")
                    ) + "\n" + html.code(f"!–ø—Ä–æ–º–æ–∫–æ–¥ {promocode}"
                    ) + "\n\n" + html.italic(
                        _("–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
                    ) + "\n" + f"https://t.me/{bot_settings.name}?start=promocode_{promocode}"), 
                    link_preview_options = LinkPreviewOptions(is_disabled=True),
                    reply_markup = await button.created(promocode=promocode)
                )
            else:
                await message.reply((
                    html.bold(_("–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå")) + "\n\n" +
                    html.italic(
                        _("‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å–æ–∑–¥–∞–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ, —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω. ‚ö†Ô∏è")
                    )
                ),
                reply_markup = await button.already_exists(promocode=promocode))
        except ValueError:
            await message.reply(
                html.bold(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ ‚ùå"))
            )

